{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetcGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcaterories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","caterories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,0BAAMC,SAXU,SAACC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAOd,2BACIO,KAAO,OACPC,MAAST,EACTU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,yBAAKc,UAAY,4CACb,yBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,2BAAIA,KCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA0BxC,OAnBAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFC,YAAa,WAETJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGf,UAKX,CAACpB,IAEGqB,EDzBwBM,CAAa3B,GAAhCa,EAFyB,EAE9BN,KAAaa,EAFiB,EAEjBA,QAEpB,OAEI,oCACI,4BAAKpB,GAEHoB,GAAW,sCAEb,yBAAKJ,UAAY,aAGTH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIkB,IAAQlB,EAAIC,IACRD,UEjBnBmB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,cAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAQ9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI4B,IAAO5B,EACPA,SAAYA,U,MChBxC+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.1bc6ef03.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setcaterories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSumit = (e) => {\n        e.preventDefault();\n        \n        if( inputValue.trim().length > 2 ) {\n            setcaterories( cats => [inputValue, ...cats, ]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={handleSumit}>\n            <input\n                type = \"text\"\n                value = {inputValue}\n                onChange = {handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setcaterories: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI (category)}&limit=10&api_key=jV6guwguR20p9zOesJcBFeg9rsQWY9bx`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n\n    return (\n        <div className = \"card animate__animated animate__fadeInUp\">\n            <img src = { url } alt = { title } />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetcGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n\n        <>\n            <h3>{category}</h3>\n\n            { loading && <p>Loading</p>}\n\n            <div className = \"card-grid\">\n            \n                {\n                    images.map( img => (\n                        <GifGridItem\n                            key = { img.id }\n                            {...img}\n                        />\n                    ))\n                }\n            \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGif';\n\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs(category)\n            .then(imgs => {\n\n                setTimeout ( () => {\n                    \n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n\n                },3000);\n\n                \n            })\n\n    }, [category])\n    \n    return state;\n\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [caterories, setcaterories] = useState(['One Punch']);\n\n    //const handleAdd = () => {\n      //  setcaterories( [...caterories, 'HunterXHunter'] );\n    //}\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setcaterories={setcaterories}/>\n            <hr />\n            <ol>\n                {\n                    caterories.map( category => (\n                        <GifGrid \n                            key = {category}\n                            category = {category} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n\n);"],"sourceRoot":""}